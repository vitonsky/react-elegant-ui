"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[606],{1292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=n(5893),s=n(1151);const r={},i="Getting started",a={id:"Introduction/GettingStarted",title:"Getting started",description:"Read introduction to understand terms and structure of package and components.",source:"@site/../docs/Introduction/GettingStarted.md",sourceDirName:"Introduction",slug:"/Introduction/GettingStarted",permalink:"/react-elegant-ui/Introduction/GettingStarted",draft:!1,unlisted:!1,editUrl:"https://github.com/vitonsky/react-elegant-ui/tree/master/docs/../docs/Introduction/GettingStarted.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Component file structure",permalink:"/react-elegant-ui/Introduction/ComponentFileStructure"},next:{title:"PackageStructure",permalink:"/react-elegant-ui/Introduction/PackageStructure"}},u={},l=[{value:"Install",id:"install",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Advanced usage",id:"advanced-usage",level:2},{value:"Build",id:"build",level:3},{value:"Make your own feature",id:"make-your-own-feature",level:3},{value:"Smart HOC",id:"smart-hoc",level:3},{value:"Simply visual features",id:"simply-visual-features",level:3},{value:"Docs",id:"docs",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"getting-started",children:"Getting started"}),"\n",(0,o.jsx)(t.p,{children:"Read introduction to understand terms and structure of package and components."}),"\n",(0,o.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,o.jsx)(t.p,{children:"Install package and peer deps"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"npm install react-elegant-ui @bem-react/classname react"})}),"\n",(0,o.jsx)(t.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,o.jsx)(t.p,{children:"Each component have a ready-made bundle with all features, you can use it."}),"\n",(0,o.jsx)(t.p,{children:"It useful for prototyping, library overview, developer purposes, for see on code samples. But should not use it in your real projects, better make your own components bundles."}),"\n",(0,o.jsx)(t.p,{children:"Use library in your application:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-JSX",children:"import React, { useState } from 'react';\n\n// Import prebuilded components with all features\nimport { Textinput } from 'react-elegant-ui/esm/components/Textinput/Textinput.bundle/desktop';\nimport { Button } from 'react-elegant-ui/esm/components/Button/Button.bundle/desktop';\n\nimport { configureRootTheme } from 'react-elegant-ui/esm/theme';\nimport { theme } from 'react-elegant-ui/esm/theme/presets/default';\n\n// Use global theme. It's client side only feature\nconfigureRootTheme({ theme });\n\nexport const Example = () => {\n  const [name, setName] = useState('');\n  const clear = () => setName('');\n\n  const clickHandler = () => console.log(name ? `Hello, ${name}` : 'Input your name');\n\n  return <div>\n    <Textinput\n      placeholder=\"Input your name\"\n      value={name}\n      setValue={setName}\n      hasClear\n      onClearClick={clear}\n    />\n    <Button view=\"action\" onClick={clickHandler}>Say my name</Button>\n\t</div>;\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"Then just build it in your favorite bundler and use."}),"\n",(0,o.jsx)(t.p,{children:"You will require bundler modules for handle JS or TSX, CSS and for convert SVG files to components."}),"\n",(0,o.jsx)(t.p,{children:"If you have problems with build process, see webpack config in examples and make issue if it not resolve your problem."}),"\n",(0,o.jsx)(t.h2,{id:"advanced-usage",children:"Advanced usage"}),"\n",(0,o.jsx)(t.p,{children:"Main feature of this components is architecture which split components to features and allow you use components with only features which you really need."}),"\n",(0,o.jsx)(t.p,{children:"For example, when you make page for smartphones, usually you are not necessary features which implement keyboard navigation different of pages for desktop and you want use native select control instead custom and probably bigger buttons."}),"\n",(0,o.jsx)(t.p,{children:"You can handle useragent header of requests on server side and give bundles depends of it. For smartphons one for desktop browsers other, for old browsers give bundle with polyfils and fallbacks, for modern - with all modern features."}),"\n",(0,o.jsx)(t.p,{children:"This way allow you decrease bundle size, speed up page loading and use experements, when you test features on part of users."}),"\n",(0,o.jsx)(t.p,{children:"If you don't want it, it's fine, just use one bundle everywhere if you want but for you it useful too."}),"\n",(0,o.jsx)(t.p,{children:"This architecture mean also that you can add new features to exists components or replace implementation of some features."}),"\n",(0,o.jsx)(t.p,{children:"You need menu with search input down of menu, and by default exists feature with search input but this input add before menu and it not satisfied you? It's not problem, because you can fix it very simply and fast, just take source code of this feature from repo, change as you wish and build component with your implementation of this feature. It take about 5 minuts."}),"\n",(0,o.jsx)(t.h3,{id:"build",children:"Build"}),"\n",(0,o.jsx)(t.p,{children:"All that you need to use component with some features is compose component and features which you need. That builds named a bundles."}),"\n",(0,o.jsxs)(t.p,{children:["Example of build in your project file ",(0,o.jsx)(t.code,{children:"myApp/components/Button/Button.bundle/desktop.ts"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"// Import tools from compose library\nimport {\n\tcompose,\n\tcomposeU,\n\tExtractProps,\n} from 'react-elegant-ui/esm/lib/compose';\n\n// Import tool from DI library\n// See docs: https://github.com/bem/bem-react/tree/master/packages/di\nimport { withRegistry } from 'react-elegant-ui/esm/lib/di';\n\n// Import base component\nimport { Button as DesktopButton } from 'react-elegant-ui/esm/components/Button/Button@desktop';\n\n// DI registry object\nimport { ButtonDesktopRegistry } from 'react-elegant-ui/esm/components/Button/Button.registry/desktop';\n\n// Modifiers view\nimport { withModButtonViewDefault } from 'react-elegant-ui/esm/components/Button/_view/Button_view_default';\nimport { withModButtonViewAction } from 'react-elegant-ui/esm/components/Button/_view/Button_view_action';\n\n// Modifiers size\nimport { withModButtonSizeS } from 'react-elegant-ui/esm/components/Button/_size/Button_size_s';\nimport { withModButtonSizeM } from 'react-elegant-ui/esm/components/Button/_size/Button_size_m';\n\n// Some local feature\nimport { withModButtonSizeL } from '../_size/Button_size_l';\n\n// Modifier width\nimport { withModButtonWidthMax } from 'react-elegant-ui/esm/components/Button/_width/Button_width_max';\n\n// Export all objects from base component\nexport * from 'react-elegant-ui/esm/components/Button/Button@desktop';\n\n// Build base component `DesktopButton` with specified features\n// Every feature it's just HOC\nexport const Button = compose(\n\t// Make HOC with this registry\n\t// Every feature after this can use this registry\n\twithRegistry(ButtonDesktopRegistry),\n\n\t// Apply only one HOC, which will first match for props\n\tcomposeU(withModButtonViewDefault, withModButtonViewAction),\n\tcomposeU(withModButtonSizeS, withModButtonSizeM, withModButtonSizeL),\n\n\t// Apply HOC always\n\twithModButtonWidthMax,\n)(DesktopButton);\n\n// Set default properties for composed component\nButton.defaultProps = { size: 'm', view: 'default' };\n\n// Export new type of component with all features\nexport type IButtonProps = ExtractProps<typeof Button>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Example of use in your project file ",(0,o.jsx)(t.code,{children:"myApp/app.tsx"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import { Button } from './components/Button/Button.bundle/desktop';\n\n// ...\n"})}),"\n",(0,o.jsx)(t.h3,{id:"make-your-own-feature",children:"Make your own feature"}),"\n",(0,o.jsx)(t.p,{children:"All features it's just HOCs."}),"\n",(0,o.jsxs)(t.p,{children:["Example of simply feature ",(0,o.jsx)(t.code,{children:"myApp/components/Button/_size/Button_size_l.tsx"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import React, { ComponentType, FC } from 'react';\n\n// Import helper for make BEM classname and button interface\nimport {\n\tcnButton,\n\tIButtonProps,\n} from 'react-elegant-ui/esm/components/Button/Button';\n\n// Include styles in bundle with use feature\nimport './Button_size_l.css';\n\n// Interface of feature\nexport interface IModButtonSizeL {\n\tsize?: 'l';\n}\n\nexport const withModButtonSizeL =\n\t(\n\t\tBaseComponent: ComponentType<IButtonProps>,\n\t\t// You must remove feature properties to prevent forwarding\n\t): FC<IModButtonSizeL & IButtonProps> =>\n\t({ size, ...props }) => {\n\t\t// do something if you need\n\t\t// ...\n\n\t\treturn (\n\t\t\t<BaseComponent\n\t\t\t\t{...props}\n\t\t\t\t// add modifier to `className`\n\t\t\t\tclassName={cnButton({ size }, [props.className])}\n\t\t\t/>\n\t\t);\n\t};\n"})}),"\n",(0,o.jsx)(t.h3,{id:"smart-hoc",children:"Smart HOC"}),"\n",(0,o.jsx)(t.p,{children:"Features may be complexity. You may use many features which trigger by one property and you may wish apply only one feature from this. For example, when you have 3 size modifier, as in example above."}),"\n",(0,o.jsx)(t.p,{children:"For this cases, you can add to your HOC a utility property which describe apply rules."}),"\n",(0,o.jsxs)(t.p,{children:["Use for this a helper ",(0,o.jsx)(t.code,{children:"withHOCConstructor"})," from library ",(0,o.jsx)(t.code,{children:"compose"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Example of feature ",(0,o.jsx)(t.code,{children:"myApp/components/Button/_size/Button_size_l.tsx"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import React, { ComponentType, FC } from 'react';\n\n// Import helper for make BEM classname and button interface\nimport {\n\tcnButton,\n\tIButtonProps,\n} from 'react-elegant-ui/esm/components/Button/Button';\n\n// Use helper\nimport { withHOCConstructor } from 'react-elegant-ui/esm/lib/compose';\n\n// Include styles in bundle with use feature\nimport './Button_size_l.css';\n\n// Interface of feature\nexport interface IModButtonSizeL {\n\tsize?: 'l';\n}\n\nexport const withModButtonSizeL = withHOCConstructor<\n\tIModButtonSizeL,\n\tIButtonProps\n>(\n\t{\n\t\t// apply this HOC only by match with this props state\n\t\tmatchProps: { size: 'l' },\n\n\t\t// make all props names from `matchProps` is private\n\t\t// it's mean that when no one feature which use this props will not match\n\t\t// this props will auto remove\n\t\tprivateMatchProps: true,\n\t},\n\t// Types will infer automatically\n\t// You still must remove feature properties to prevent forwarding\n\t(BaseComponent) =>\n\t\t({ size, ...props }) => {\n\t\t\t// do something if you need\n\t\t\t// ...\n\n\t\t\treturn (\n\t\t\t\t<BaseComponent\n\t\t\t\t\t{...props}\n\t\t\t\t\tclassName={cnButton({ size }, [props.className])}\n\t\t\t\t/>\n\t\t\t);\n\t\t},\n);\n"})}),"\n",(0,o.jsx)(t.h3,{id:"simply-visual-features",children:"Simply visual features"}),"\n",(0,o.jsxs)(t.p,{children:["Many visual features just import styles and extends ",(0,o.jsx)(t.code,{children:"className"})," property."]}),"\n",(0,o.jsxs)(t.p,{children:["For this cases you can use helper ",(0,o.jsx)(t.code,{children:"withClassnameHOC"})," from library ",(0,o.jsx)(t.code,{children:"compose"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Example of simply visual feature ",(0,o.jsx)(t.code,{children:"myApp/components/Button/_size/Button_size_l.tsx"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"// Use helper\nimport { withClassnameHOC } from 'react-elegant-ui/esm/lib/compose';\n\n// Import helper for make BEM classname\nimport { cnButton } from '../Button';\n\n// Include styles in bundle with use feature\nimport './Button_size_l.css';\n\n// Interface of feature\nexport interface IModButtonSizeL {\n\tsize?: 'l';\n}\n\n// By match with props state will apply HOC which extend `className` property.\n// This example do same as example above\nexport const withModButtonSizeL = withClassnameHOC<IModButtonSizeL>(\n\tcnButton(),\n\t{\n\t\tsize: 'l',\n\t},\n);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"docs",children:"Docs"}),"\n",(0,o.jsxs)(t.p,{children:["For more info about development of features and components see ",(0,o.jsx)(t.a,{href:"/react-elegant-ui/Component%20development/Introduction",children:"component development"})," docs section."]}),"\n",(0,o.jsxs)(t.p,{children:["Each component directory contains ",(0,o.jsx)(t.code,{children:".md"})," files with documentation. See there if you wanna know about specific component."]}),"\n",(0,o.jsxs)(t.p,{children:["For look at demo of components, you can build examples, see directory ",(0,o.jsx)(t.code,{children:"examples"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var o=n(7294);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);