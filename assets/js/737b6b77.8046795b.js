"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[94],{6597:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=t(5893),s=t(1151);const i={},r="Developer notes",c={id:"Component development/Notes",title:"Developer notes",description:"Notes about developing a components.",source:"@site/../docs/Component development/Notes.md",sourceDirName:"Component development",slug:"/Component development/Notes",permalink:"/react-elegant-ui/Component development/Notes",draft:!1,unlisted:!1,editUrl:"https://github.com/vitonsky/react-elegant-ui/tree/master/docs/../docs/Component development/Notes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/react-elegant-ui/Component development/Introduction"},next:{title:"Individual contributor license agreement",permalink:"/react-elegant-ui/Contributing/CLA"}},d={},l=[{value:"Styles",id:"styles",level:2},{value:"Abstraction",id:"abstraction",level:2},{value:"Use root node instead document",id:"use-root-node-instead-document",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"developer-notes",children:"Developer notes"}),"\n",(0,o.jsx)(n.p,{children:"Notes about developing a components."}),"\n",(0,o.jsx)(n.h2,{id:"styles",children:"Styles"}),"\n",(0,o.jsx)(n.p,{children:"Use CSS properties instead specific values everywhere when it possible, except specific cases like positioning with specify indents for each node."}),"\n",(0,o.jsx)(n.p,{children:"All local CSS properties are defined in token files inside component directory, global properties define in token files in theme directory."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"abstraction",children:"Abstraction"}),"\n",(0,o.jsxs)(n.p,{children:["Objects and interfaces should implement and extends common objects, like ",(0,o.jsx)(n.code,{children:"IComponentElement"})," for example. It simplify control on many entities and decrease code complexity."]}),"\n",(0,o.jsx)(n.p,{children:"All components which use similar interfaces should be unify, make common interface and use it."}),"\n",(0,o.jsxs)(n.p,{children:["All blocks must have property ",(0,o.jsx)(n.code,{children:"innerRef"})," for forwarding ref objects to block wrapper."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"use-root-node-instead-document",children:"Use root node instead document"}),"\n",(0,o.jsxs)(n.p,{children:["When component use inside ShadowDOM, its root is not ",(0,o.jsx)(n.code,{children:"document"})," and property ",(0,o.jsx)(n.code,{children:"event.target"})," from event of ",(0,o.jsx)(n.code,{children:"document"})," will contain ShadowDOM wrapper, but not real target inside this."]}),"\n",(0,o.jsxs)(n.p,{children:["Consider this, and use ",(0,o.jsx)(n.code,{children:"document"})," only for really global event handlers without root context, such as release mouse or button, but when need access to ",(0,o.jsx)(n.code,{children:"event.target"})," - use ",(0,o.jsx)(n.code,{children:"node.getRootNode()"}),", for component stay work in ShadowDOM."]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var o=t(7294);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);