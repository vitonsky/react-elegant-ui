{
  "url": "/docs/Component development/ComponentNaming",
  "title": "Component naming and structure",
  "text": "\n\nNames must be clear and unambiguous. It helps you to navigate in large number of objects and simplify supporting.When object names obey this rules, you always be understand what you use just by name and refactor be easy.\n\nNames of all interfaces and exported blocks and elements should be CamelCase\n\nThis way make search in IDE more easy and assist to understand type of imported object and different interface from JS object.\n\nFor example modifier  instead .It important for independency names from values. For example, color of action button may be different in some projects and you should abstract it.\n\n\n\nBlock must export interface with own props.It needs to able create other implementation of element and interact with block from other objects.Name pattern: Example\n\nBlock must export object of type  which implement own interface.Name pattern: Example\n\nBlock features may export HOC for apply this feature on base implementation of block.Name pattern: Example\n\nBlock must export function which construct  property value for elements and modifiersName pattern: Example\n\n\n\nElement must export interface with own props.Name pattern: Example\n\nElement may export context object which implement own interface.It need to simplify deep forward props.Name pattern: Example\n\nElement must export object of type  which implement own interface.Name pattern: Example\n\n\n\nModifier must export interface with props which add.Name pattern: Example\n\nModifier must export HOC for apply to block.Name pattern: Example\n\n\n\nRegistry must export interface with items which it contains.Feature specific registry (like platform registry) may extend common registry interface and add or redefine some items.Name pattern: ExampleExample with feature scope\n\nAll registries (except index files) must export registry object.Name pattern: ExampleExample with feature scopeAlso, registry file may export object  which contains all dependency objects"
}