{"pageProps":{"title":"Component anatomy","date":1626808434002,"text":"# Component anatomy\n\nComponent it's essence which implement a some functional of user interface.\n\nFor flexibility purposes components split to many modules and have high abstraction.\n\nThis architecture allows build components only with necessary features and very easy implement addon features for exists modules or replace modules.\n\nEach essence must have interface which it implement. Interface is primary\n\n## Structure and bundles\n\nComponents developed by [BEM methodology](https://en.bem.info/methodology/) and split to Block, Elements and Modifiers.\nTo use component, you have to build it with necessary features (Block, Elements and Modifiers).\n\nThat builds named a \"bundles\" and by default each component have at least 1 bundle with all features (except some very simply helper components).\n\nYou can use it for test components, but for production you should build your own bundles to decrease application bundle size and maybe use your own features.\n\n### Block\n\nBlock it's main part of component which contains a must common logic\n\n### Elements\n\nElements it's components exists only inside block\n\n### Modifiers\n\nModifiers it's HOCs that define optional functional of block\n\n## Design tokens\n\nDesign tokens contains a colors, sizes, typography and other values of component styles.\n\nComponent define a [design tokens](/docs/Introduction/Tokens) which compile to CSS properties that is use in styles of component.\n\nThis allows flexible redefine token values and reuse common values like project color or font size.\n\nWhen you make your own elements, you can use exists or define new tokens.\n\n## Dependency registries\n\nTo decrease code dependency, objects must don't use other objects directly.\n\nFor example, while make Block extension which add features to basic block, we must make HOC for basic block and wrap basic block instead make component which use basic block inside.\n\nThis way allow apply this extension to other implementation of basic block.\n\nBut, when you need component inside other component, you can use dependency registry.\n\nYou just use provider to get object by name and still can set any object outside of component.\n\n## Assets\n\nComponent may contains some resources such as icons, fonts or shared code. It should be place in directories with clear names. For example `ComponentName.hocs`, `ComponentName.assets`.\n\nThird-party assets must contains license texts and links to sources.\n","navigation":[{"title":"Introduction","child":[{"title":"About","path":"/docs/Introduction/About"},{"title":"Getting started","path":"/docs/Introduction/GettingStarted"},{"title":"Package structure","path":"/docs/Introduction/PackageStructure"},{"title":"Component architecture","path":"/docs/Introduction/ComponentArchitecture"},{"title":"Component file structure","path":"/docs/Introduction/ComponentFileStructure"},{"title":"Theming","path":"/docs/Introduction/Theming"},{"title":"Tokens","path":"/docs/Introduction/Tokens"}]},{"title":"Component development","child":[{"title":"Introduction","path":"/docs/Component development/Introduction"},{"title":"Component naming","path":"/docs/Component development/ComponentNaming"},{"title":"Design system","path":"/docs/Component development/DesignSystem"},{"title":"Notes","path":"/docs/Component development/Notes"}]},{"title":"Contributing","child":[{"title":"Contributing rules","path":"/docs/Contributing/ContributingRules"},{"title":"CLA","path":"/docs/Contributing/CLA"}]}]},"pages":[],"__N_SSG":true}