{"pageProps":{"title":"Component naming and structure","date":1626903325940,"text":"# Component naming and structure\n\nNames must be clear and unambiguous. It helps you to navigate in large number of objects and simplify supporting.\n\nWhen object names obey this rules, you always be understand what you use just by name and refactor be easy.\n\n<!-- TODO: write about name and struct principles of design tokens -->\n\n## Common principles\n\nNames of all interfaces and exported blocks and elements should be CamelCase\n\n### Exported interfaces should start from prefix `I`\n\nThis way make search in IDE more easy and assist to understand type of imported object and different interface from JS object.\n\n### Name entities by meaning and not by content\n\nFor example modifier `Component_view_error` instead `Component_view_red`.\n\nIt important for independency names from values. For example, color of action button may be different in some projects and you should abstract it.\n\n***\n\n## Block\n\n### Interface\n\nBlock must export interface with own props.\n\nIt needs to able create other implementation of element and interact with block from other objects.\n\nName pattern: `I + ComponentName + Props`\n\nExample\n\n*   `IButtonProps`\n*   `ITabMenuProps`\n\n### Component\n\nBlock must export object of type `React.ComponentType` which implement own interface.\n\nName pattern: `ComponentName`\n\nExample\n\n*   `Button`\n*   `TabMenu`\n\n### Feature HOC\n\nBlock features may export HOC for apply this feature on base implementation of block.\n\nName pattern: `with + ComponentName + FeatureName`\n\nExample\n\n*   `withMenuDesktop`\n*   `withSelectDesktop`\n\n### Class name constructor\n\nBlock must export function which construct `className` property value for elements and modifiers\n\nName pattern: `cn + ComponentName`\n\nExample\n\n*   `cnButton`\n*   `cnTabMenu`\n\n***\n\n## Element\n\n### Interface\n\nElement must export interface with own props.\n\nName pattern: `I + ComponentName + ElementName`\n\nExample\n\n*   `IButtonText`\n*   `ITabMenuItemText`\n\n### Context\n\nElement may export context object which implement own interface.\n\nIt need to simplify deep forward props.\n\nName pattern: `ComponentName + ElementName + Context`\n\nExample\n\n*   `SelectTriggerContext`\n*   `SelectListContext`\n\n### Component\n\nElement must export object of type `React.ComponentType` which implement own interface.\n\nName pattern: `ComponentName + ElementName`\n\nExample\n\n*   `ButtonText`\n*   `TabMenuItemText`\n\n***\n\n## Modifier\n\n### Interface\n\nModifier must export interface with props which add.\n\nName pattern: `IMod + ComponentName + ModName`\n\nExample\n\n*   `IModButtonViewDefault`\n*   `IModTabMenuViewAction`\n\n### HOC\n\nModifier must export HOC for apply to block.\n\nName pattern: `withMod + ComponentName + ModName`\n\nExample\n\n*   `withModButtonViewAction`\n*   `withModTabMenuViewDefault`\n\n***\n\n## Dependency injection registry\n\n### Interface\n\nRegistry must export interface with items which it contains.\n\nFeature specific registry (like platform registry) may extend common registry interface and add or redefine some items.\n\nName pattern: `I + ComponentName + FeatureName + Registry`\n\nExample\n\n*   `IButtonRegistry`\n*   `ITabMenuRegistry`\n\nExample with feature scope\n\n*   `IButtonDesktopRegistry`\n*   `ITabMenuExperementalIconsRegistry`\n\n### Registry\n\nAll registries (except index files) must export registry object.\n\nName pattern: `ComponentName + FeatureName + Registry`\n\nExample\n\n*   `ButtonRegistry`\n*   `TabMenuRegistry`\n\nExample with feature scope\n\n*   `ButtonDesktopRegistry`\n*   `TabMenuExperementalIconsRegistry`\n\nAlso, registry file may export object `regObjects` which contains all dependency objects\n","navigation":[{"title":"Introduction","child":[{"title":"About","path":"/docs/Introduction/About"},{"title":"Getting started","path":"/docs/Introduction/GettingStarted"},{"title":"Package structure","path":"/docs/Introduction/PackageStructure"},{"title":"Component architecture","path":"/docs/Introduction/ComponentArchitecture"},{"title":"Component file structure","path":"/docs/Introduction/ComponentFileStructure"},{"title":"Theming","path":"/docs/Introduction/Theming"},{"title":"Tokens","path":"/docs/Introduction/Tokens"}]},{"title":"Component development","child":[{"title":"Introduction","path":"/docs/Component development/Introduction"},{"title":"Component naming","path":"/docs/Component development/ComponentNaming"},{"title":"Design system","path":"/docs/Component development/DesignSystem"},{"title":"Notes","path":"/docs/Component development/Notes"}]},{"title":"Contributing","child":[{"title":"Contributing rules","path":"/docs/Contributing/ContributingRules"},{"title":"CLA","path":"/docs/Contributing/CLA"}]}]},"pages":[],"__N_SSG":true}